{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\nvar _forEachInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.commitServerChanges = commitServerChanges;\nexports.defaultState = defaultState;\nexports.estimateAttribute = estimateAttribute;\nexports.estimateAttributes = estimateAttributes;\nexports.mergeFirstPendingState = mergeFirstPendingState;\nexports.popPendingState = popPendingState;\nexports.pushPendingState = pushPendingState;\nexports.setPendingOp = setPendingOp;\nexports.setServerData = setServerData;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\nvar _TaskQueue = _interopRequireDefault(require(\"./TaskQueue\"));\nvar _ParseOp = require(\"./ParseOp\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context, _context2;\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), !0)).call(_context, function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) {\n      _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction defaultState() /*: State*/\n{\n  return {\n    serverData: {},\n    pendingOps: [{}],\n    objectCache: {},\n    tasks: new _TaskQueue.default(),\n    existed: false\n  };\n}\nfunction setServerData(serverData\n/*: AttributeMap*/, attributes\n/*: AttributeMap*/) {\n  for (var _attr in attributes) {\n    if (typeof attributes[_attr] !== 'undefined') {\n      serverData[_attr] = attributes[_attr];\n    } else {\n      delete serverData[_attr];\n    }\n  }\n}\nfunction setPendingOp(pendingOps\n/*: Array<OpsMap>*/, attr\n/*: string*/, op\n/*: ?Op*/) {\n  var last = pendingOps.length - 1;\n  if (op) {\n    pendingOps[last][attr] = op;\n  } else {\n    delete pendingOps[last][attr];\n  }\n}\nfunction pushPendingState(pendingOps\n/*: Array<OpsMap>*/) {\n  pendingOps.push({});\n}\nfunction popPendingState(pendingOps\n/*: Array<OpsMap>*/) /*: OpsMap*/\n{\n  var first = pendingOps.shift();\n  if (!pendingOps.length) {\n    pendingOps[0] = {};\n  }\n  return first;\n}\nfunction mergeFirstPendingState(pendingOps\n/*: Array<OpsMap>*/) {\n  var first = popPendingState(pendingOps);\n  var next = pendingOps[0];\n  for (var _attr2 in first) {\n    if (next[_attr2] && first[_attr2]) {\n      var merged = next[_attr2].mergeWith(first[_attr2]);\n      if (merged) {\n        next[_attr2] = merged;\n      }\n    } else {\n      next[_attr2] = first[_attr2];\n    }\n  }\n}\nfunction estimateAttribute(serverData\n/*: AttributeMap*/, pendingOps\n/*: Array<OpsMap>*/, className\n/*: string*/, id\n/*: ?string*/, attr\n/*: string*/) /*: mixed*/\n{\n  var value = serverData[attr];\n  for (var i = 0; i < pendingOps.length; i++) {\n    if (pendingOps[i][attr]) {\n      if (pendingOps[i][attr] instanceof _ParseOp.RelationOp) {\n        if (id) {\n          value = pendingOps[i][attr].applyTo(value, {\n            className: className,\n            id: id\n          }, attr);\n        }\n      } else {\n        value = pendingOps[i][attr].applyTo(value);\n      }\n    }\n  }\n  return value;\n}\nfunction estimateAttributes(serverData\n/*: AttributeMap*/, pendingOps\n/*: Array<OpsMap>*/, className\n/*: string*/, id\n/*: ?string*/) /*: AttributeMap*/\n{\n  var data = {};\n  for (var attr in serverData) {\n    data[attr] = serverData[attr];\n  }\n  for (var i = 0; i < pendingOps.length; i++) {\n    for (attr in pendingOps[i]) {\n      if (pendingOps[i][attr] instanceof _ParseOp.RelationOp) {\n        if (id) {\n          data[attr] = pendingOps[i][attr].applyTo(data[attr], {\n            className: className,\n            id: id\n          }, attr);\n        }\n      } else {\n        if ((0, _includes.default)(attr).call(attr, '.')) {\n          // convert a.b.c into { a: { b: { c: value } } }\n          var fields = attr.split('.');\n          var first = fields[0];\n          var last = fields[fields.length - 1];\n          data[first] = _objectSpread({}, serverData[first]);\n          var object = _objectSpread({}, data);\n          for (var _i = 0; _i < fields.length - 1; _i++) {\n            object = object[fields[_i]];\n          }\n          object[last] = pendingOps[i][attr].applyTo(object[last]);\n        } else {\n          data[attr] = pendingOps[i][attr].applyTo(data[attr]);\n        }\n      }\n    }\n  }\n  return data;\n}\nfunction commitServerChanges(serverData\n/*: AttributeMap*/, objectCache\n/*: ObjectCache*/, changes\n/*: AttributeMap*/) {\n  for (var _attr3 in changes) {\n    var val = changes[_attr3];\n    serverData[_attr3] = val;\n    if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof _ParseObject.default) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n      var json = (0, _encode.default)(val, false, true);\n      objectCache[_attr3] = (0, _stringify.default)(json);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}