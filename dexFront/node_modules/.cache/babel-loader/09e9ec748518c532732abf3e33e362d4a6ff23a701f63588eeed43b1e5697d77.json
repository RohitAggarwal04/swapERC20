{"ast":null,"code":"'use strict';\n\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController;\nconst {\n  codes: {\n    ERR_INVALID_ARG_TYPE,\n    ERR_MISSING_ARGS,\n    ERR_OUT_OF_RANGE\n  },\n  AbortError\n} = require('../../ours/errors');\nconst {\n  validateAbortSignal,\n  validateInteger,\n  validateObject\n} = require('../validators');\nconst kWeakHandler = require('../../ours/primordials').Symbol('kWeak');\nconst {\n  finished\n} = require('./end-of-stream');\nconst {\n  ArrayPrototypePush,\n  MathFloor,\n  Number,\n  NumberIsNaN,\n  Promise,\n  PromiseReject,\n  PromisePrototypeThen,\n  Symbol\n} = require('../../ours/primordials');\nconst kEmpty = Symbol('kEmpty');\nconst kEof = Symbol('kEof');\nfunction map(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn);\n  }\n  if (options != null) {\n    validateObject(options, 'options');\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal');\n  }\n  let concurrency = 1;\n  if ((options === null || options === undefined ? undefined : options.concurrency) != null) {\n    concurrency = MathFloor(options.concurrency);\n  }\n  validateInteger(concurrency, 'concurrency', 1);\n  return async function* map() {\n    var _options$signal, _options$signal2;\n    const ac = new AbortController();\n    const stream = this;\n    const queue = [];\n    const signal = ac.signal;\n    const signalOpt = {\n      signal\n    };\n    const abort = () => ac.abort();\n    if (options !== null && options !== undefined && (_options$signal = options.signal) !== null && _options$signal !== undefined && _options$signal.aborted) {\n      abort();\n    }\n    options === null || options === undefined ? undefined : (_options$signal2 = options.signal) === null || _options$signal2 === undefined ? undefined : _options$signal2.addEventListener('abort', abort);\n    let next;\n    let resume;\n    let done = false;\n    function onDone() {\n      done = true;\n    }\n    async function pump() {\n      try {\n        for await (let val of stream) {\n          var _val;\n          if (done) {\n            return;\n          }\n          if (signal.aborted) {\n            throw new AbortError();\n          }\n          try {\n            val = fn(val, signalOpt);\n          } catch (err) {\n            val = PromiseReject(err);\n          }\n          if (val === kEmpty) {\n            continue;\n          }\n          if (typeof ((_val = val) === null || _val === undefined ? undefined : _val.catch) === 'function') {\n            val.catch(onDone);\n          }\n          queue.push(val);\n          if (next) {\n            next();\n            next = null;\n          }\n          if (!done && queue.length && queue.length >= concurrency) {\n            await new Promise(resolve => {\n              resume = resolve;\n            });\n          }\n        }\n        queue.push(kEof);\n      } catch (err) {\n        const val = PromiseReject(err);\n        PromisePrototypeThen(val, undefined, onDone);\n        queue.push(val);\n      } finally {\n        var _options$signal3;\n        done = true;\n        if (next) {\n          next();\n          next = null;\n        }\n        options === null || options === undefined ? undefined : (_options$signal3 = options.signal) === null || _options$signal3 === undefined ? undefined : _options$signal3.removeEventListener('abort', abort);\n      }\n    }\n    pump();\n    try {\n      while (true) {\n        while (queue.length > 0) {\n          const val = await queue[0];\n          if (val === kEof) {\n            return;\n          }\n          if (signal.aborted) {\n            throw new AbortError();\n          }\n          if (val !== kEmpty) {\n            yield val;\n          }\n          queue.shift();\n          if (resume) {\n            resume();\n            resume = null;\n          }\n        }\n        await new Promise(resolve => {\n          next = resolve;\n        });\n      }\n    } finally {\n      ac.abort();\n      done = true;\n      if (resume) {\n        resume();\n        resume = null;\n      }\n    }\n  }.call(this);\n}\nfunction asIndexedPairs() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n  if (options != null) {\n    validateObject(options, 'options');\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal');\n  }\n  return async function* asIndexedPairs() {\n    let index = 0;\n    for await (const val of this) {\n      var _options$signal4;\n      if (options !== null && options !== undefined && (_options$signal4 = options.signal) !== null && _options$signal4 !== undefined && _options$signal4.aborted) {\n        throw new AbortError({\n          cause: options.signal.reason\n        });\n      }\n      yield [index++, val];\n    }\n  }.call(this);\n}\nasync function some(fn) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  for await (const unused of filter.call(this, fn, options)) {\n    return true;\n  }\n  return false;\n}\nasync function every(fn) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn);\n  }\n  // https://en.wikipedia.org/wiki/De_Morgan%27s_laws\n  return !(await some.call(this, async function () {\n    return !(await fn(...arguments));\n  }, options));\n}\nasync function find(fn, options) {\n  for await (const result of filter.call(this, fn, options)) {\n    return result;\n  }\n  return undefined;\n}\nasync function forEach(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn);\n  }\n  async function forEachFn(value, options) {\n    await fn(value, options);\n    return kEmpty;\n  }\n  // eslint-disable-next-line no-unused-vars\n  for await (const unused of map.call(this, forEachFn, options));\n}\nfunction filter(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn);\n  }\n  async function filterFn(value, options) {\n    if (await fn(value, options)) {\n      return value;\n    }\n    return kEmpty;\n  }\n  return map.call(this, filterFn, options);\n}\n\n// Specific to provide better error to reduce since the argument is only\n// missing if the stream has no items in it - but the code is still appropriate\nclass ReduceAwareErrMissingArgs extends ERR_MISSING_ARGS {\n  constructor() {\n    super('reduce');\n    this.message = 'Reduce of an empty stream requires an initial value';\n  }\n}\nasync function reduce(reducer, initialValue, options) {\n  var _options$signal5;\n  if (typeof reducer !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('reducer', ['Function', 'AsyncFunction'], reducer);\n  }\n  if (options != null) {\n    validateObject(options, 'options');\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal');\n  }\n  let hasInitialValue = arguments.length > 1;\n  if (options !== null && options !== undefined && (_options$signal5 = options.signal) !== null && _options$signal5 !== undefined && _options$signal5.aborted) {\n    const err = new AbortError(undefined, {\n      cause: options.signal.reason\n    });\n    this.once('error', () => {}); // The error is already propagated\n    await finished(this.destroy(err));\n    throw err;\n  }\n  const ac = new AbortController();\n  const signal = ac.signal;\n  if (options !== null && options !== undefined && options.signal) {\n    const opts = {\n      once: true,\n      [kWeakHandler]: this\n    };\n    options.signal.addEventListener('abort', () => ac.abort(), opts);\n  }\n  let gotAnyItemFromStream = false;\n  try {\n    for await (const value of this) {\n      var _options$signal6;\n      gotAnyItemFromStream = true;\n      if (options !== null && options !== undefined && (_options$signal6 = options.signal) !== null && _options$signal6 !== undefined && _options$signal6.aborted) {\n        throw new AbortError();\n      }\n      if (!hasInitialValue) {\n        initialValue = value;\n        hasInitialValue = true;\n      } else {\n        initialValue = await reducer(initialValue, value, {\n          signal\n        });\n      }\n    }\n    if (!gotAnyItemFromStream && !hasInitialValue) {\n      throw new ReduceAwareErrMissingArgs();\n    }\n  } finally {\n    ac.abort();\n  }\n  return initialValue;\n}\nasync function toArray(options) {\n  if (options != null) {\n    validateObject(options, 'options');\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal');\n  }\n  const result = [];\n  for await (const val of this) {\n    var _options$signal7;\n    if (options !== null && options !== undefined && (_options$signal7 = options.signal) !== null && _options$signal7 !== undefined && _options$signal7.aborted) {\n      throw new AbortError(undefined, {\n        cause: options.signal.reason\n      });\n    }\n    ArrayPrototypePush(result, val);\n  }\n  return result;\n}\nfunction flatMap(fn, options) {\n  const values = map.call(this, fn, options);\n  return async function* flatMap() {\n    for await (const val of values) {\n      yield* val;\n    }\n  }.call(this);\n}\nfunction toIntegerOrInfinity(number) {\n  // We coerce here to align with the spec\n  // https://github.com/tc39/proposal-iterator-helpers/issues/169\n  number = Number(number);\n  if (NumberIsNaN(number)) {\n    return 0;\n  }\n  if (number < 0) {\n    throw new ERR_OUT_OF_RANGE('number', '>= 0', number);\n  }\n  return number;\n}\nfunction drop(number) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  if (options != null) {\n    validateObject(options, 'options');\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal');\n  }\n  number = toIntegerOrInfinity(number);\n  return async function* drop() {\n    var _options$signal8;\n    if (options !== null && options !== undefined && (_options$signal8 = options.signal) !== null && _options$signal8 !== undefined && _options$signal8.aborted) {\n      throw new AbortError();\n    }\n    for await (const val of this) {\n      var _options$signal9;\n      if (options !== null && options !== undefined && (_options$signal9 = options.signal) !== null && _options$signal9 !== undefined && _options$signal9.aborted) {\n        throw new AbortError();\n      }\n      if (number-- <= 0) {\n        yield val;\n      }\n    }\n  }.call(this);\n}\nfunction take(number) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  if (options != null) {\n    validateObject(options, 'options');\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal');\n  }\n  number = toIntegerOrInfinity(number);\n  return async function* take() {\n    var _options$signal10;\n    if (options !== null && options !== undefined && (_options$signal10 = options.signal) !== null && _options$signal10 !== undefined && _options$signal10.aborted) {\n      throw new AbortError();\n    }\n    for await (const val of this) {\n      var _options$signal11;\n      if (options !== null && options !== undefined && (_options$signal11 = options.signal) !== null && _options$signal11 !== undefined && _options$signal11.aborted) {\n        throw new AbortError();\n      }\n      if (number-- > 0) {\n        yield val;\n      } else {\n        return;\n      }\n    }\n  }.call(this);\n}\nmodule.exports.streamReturningOperators = {\n  asIndexedPairs,\n  drop,\n  filter,\n  flatMap,\n  map,\n  take\n};\nmodule.exports.promiseReturningOperators = {\n  every,\n  forEach,\n  reduce,\n  toArray,\n  some,\n  find\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}