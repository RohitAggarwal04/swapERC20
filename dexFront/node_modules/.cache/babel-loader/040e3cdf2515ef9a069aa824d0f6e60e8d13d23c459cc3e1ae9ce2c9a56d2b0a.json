{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _startsWith = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/starts-with\"));\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\nvar _ParsePolygon = _interopRequireDefault(require(\"./ParsePolygon\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseOp = require(\"./ParseOp\");\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\nfunction encode(value\n/*: mixed*/, disallowObjects\n/*: boolean*/, forcePointers\n/*: boolean*/, seen\n/*: Array<mixed>*/, offline\n/*: boolean*/) /*: any*/\n{\n  if (value instanceof _ParseObject.default) {\n    var _context;\n    if (disallowObjects) {\n      throw new Error('Parse Objects not allowed here');\n    }\n    var seenEntry = value.id ? (0, _concat.default)(_context = \"\".concat(value.className, \":\")).call(_context, value.id) : value;\n    if (forcePointers || !seen || (0, _indexOf.default)(seen).call(seen, seenEntry) > -1 || value.dirty() || (0, _keys.default)(value._getServerData()).length < 1) {\n      var _context2;\n      if (offline && (0, _startsWith.default)(_context2 = value._getId()).call(_context2, 'local')) {\n        return value.toOfflinePointer();\n      }\n      return value.toPointer();\n    }\n    seen = (0, _concat.default)(seen).call(seen, seenEntry);\n    return value._toFullJSON(seen, offline);\n  }\n  if (value instanceof _ParseOp.Op || value instanceof _ParseACL.default || value instanceof _ParseGeoPoint.default || value instanceof _ParsePolygon.default || value instanceof _ParseRelation.default) {\n    return value.toJSON();\n  }\n  if (value instanceof _ParseFile.default) {\n    if (!value.url()) {\n      throw new Error('Tried to encode an unsaved file.');\n    }\n    return value.toJSON();\n  }\n  if (Object.prototype.toString.call(value) === '[object Date]') {\n    if (isNaN(value)) {\n      throw new Error('Tried to encode an invalid date.');\n    }\n    return {\n      __type: 'Date',\n      iso: value\n      /*: any*/.toJSON()\n    };\n  }\n  if (Object.prototype.toString.call(value) === '[object RegExp]' && typeof value.source === 'string') {\n    return value.source;\n  }\n  if ((0, _isArray.default)(value)) {\n    return (0, _map.default)(value).call(value, function (v) {\n      return encode(v, disallowObjects, forcePointers, seen, offline);\n    });\n  }\n  if (value && (0, _typeof2.default)(value) === 'object') {\n    var output = {};\n    for (var k in value) {\n      output[k] = encode(value[k], disallowObjects, forcePointers, seen, offline);\n    }\n    return output;\n  }\n  return value;\n}\nfunction _default(value\n/*: mixed*/, disallowObjects\n/*:: ?: boolean*/, forcePointers\n/*:: ?: boolean*/, seen\n/*:: ?: Array<mixed>*/, offline\n/*:: ?: boolean*/) /*: any*/\n{\n  return encode(value, !!disallowObjects, !!forcePointers, seen || [], offline);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}