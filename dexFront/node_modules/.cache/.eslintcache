[{"C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\index.js":"1","C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\App.js":"2","C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\components\\Header.js":"3","C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\components\\Swap.js":"4","C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\components\\Tokens.js":"5"},{"size":749,"mtime":1683462797426,"results":"6","hashOfConfig":"7"},{"size":897,"mtime":1683554394324,"results":"8","hashOfConfig":"7"},{"size":793,"mtime":1683463278932,"results":"9","hashOfConfig":"7"},{"size":6858,"mtime":1683554735180,"results":"10","hashOfConfig":"7"},{"size":116,"mtime":1683383919600,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"bu5gsg",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\index.js",[],[],[],"C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\App.js",[],[],"C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\components\\Header.js",[],[],"C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\components\\Swap.js",["29","30","31"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Input, Popover, Radio, Modal, message } from \"antd\";\r\nimport {\r\n  ArrowDownOutlined,\r\n  DownOutlined,\r\n  SettingOutlined,\r\n} from \"@ant-design/icons\";\r\nimport tokenList from \"../tokenList.json\";\r\nimport axios from \"axios\";\r\nimport { useSendTransaction, useWaitForTransaction } from \"wagmi\";\r\n\r\n\r\nfunction Swap(props) {\r\n  const { address, isConnected } = props;\r\n  const [messageApi, contextHolder] = message.useMessage();\r\n  const [slippage, setSlippage] = useState(2.5);\r\n  const [tokenOneAmount, setTokenOneAmount] = useState(null);\r\n  const [tokenTwoAmount, setTokenTwoAmount] = useState(null);\r\n  const [tokenOne, setTokenOne] = useState(tokenList[0]);\r\n  const [tokenTwo, setTokenTwo] = useState(tokenList[1]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [changeToken, setChangeToken] = useState(1);\r\n  const [prices, setPrices] = useState(null);\r\n  const [txDetails, setTxDetails] = useState({\r\n    to:null,\r\n    data: null,\r\n    value: null,\r\n  }); \r\n\r\n  const {data, sendTransaction} = useSendTransaction({\r\n    request: {\r\n      from: address,\r\n      to: String(txDetails.to),\r\n      data: String(txDetails.data),\r\n      value: String(txDetails.value),\r\n    }\r\n  })\r\n\r\n  const { isLoading, isSuccess } = useWaitForTransaction({\r\n    hash: data?.hash,\r\n  })\r\n\r\n  function handleSlippageChange(e) {\r\n    setSlippage(e.target.value);\r\n  }\r\n\r\n  function changeAmount(e) {\r\n    setTokenOneAmount(e.target.value);\r\n    if(e.target.value && prices){\r\n      setTokenTwoAmount((e.target.value * prices.ratio).toFixed(2))\r\n    }else{\r\n      setTokenTwoAmount(null);\r\n    }\r\n  }\r\n\r\n  function switchTokens() {\r\n    setPrices(null);\r\n    setTokenOneAmount(null);\r\n    setTokenTwoAmount(null);\r\n    const one = tokenOne;\r\n    const two = tokenTwo;\r\n    setTokenOne(two);\r\n    setTokenTwo(one);\r\n    fetchPrices(two.address, one.address);\r\n  }\r\n\r\n  function openModal(asset) {\r\n    setChangeToken(asset);\r\n    setIsOpen(true);\r\n  }\r\n\r\n  function modifyToken(i){\r\n    setPrices(null);\r\n    setTokenOneAmount(null);\r\n    setTokenTwoAmount(null);\r\n    if (changeToken === 1) {\r\n      setTokenOne(tokenList[i]);\r\n      fetchPrices(tokenList[i].address, tokenTwo.address)\r\n    } else {\r\n      setTokenTwo(tokenList[i]);\r\n      fetchPrices(tokenOne.address, tokenList[i].address)\r\n    }\r\n    setIsOpen(false);\r\n  }\r\n\r\n  async function fetchPrices(one, two){\r\n\r\n      const res = await axios.get(`http://localhost:3005/tokenPrice`, {\r\n        params: {addressOne: one, addressTwo: two}\r\n      })\r\n\r\n      \r\n      setPrices(res.data)\r\n  }\r\n\r\n\r\n\r\nasync function fetchDexSwap(){\r\n  const allowance = await axios.get(`https://api.1inch.io/v5.0/1/approve/allowance?tokenAddress=${tokenOne.address}&walletAddress=${address}`)\r\nif (allowance.data.allowance===\"0\") {\r\n  const approve = await axios.get(`https://api.1inch.io/v5.0/1/approve/transaction?tokenAddress=${tokenOne.address}`)\r\n  setTxDetails(approve.data)\r\n  console.log(\"Not Approved\");\r\n  return\r\n}\r\nconsole.log(\"make swap\");\r\nconst tx = await axios.get(\r\n  `https://api.1inch.io/v5.0/1/swap?fromTokenAddress=${tokenOne.address}&toTokenAddress=${tokenTwo.address}&amount=${tokenOneAmount.padEnd(tokenOne.decimals+tokenOneAmount.length, '0')}&fromAddress=${address}&slippage=${slippage}`\r\n)\r\n\r\nlet decimals = Number(`1E${tokenTwo.decimals}`)\r\nsetTokenTwoAmount((Number(tx.data.toTokenAmount)/decimals).toFixed(2));\r\n\r\nsetTxDetails(tx.data.tx);\r\n}\r\n  useEffect(()=>{\r\n\r\n    fetchPrices(tokenList[0].address, tokenList[1].address)\r\n\r\n  }, [])\r\n\r\n  useEffect(()=>{\r\n\r\n      if(txDetails.to && isConnected){\r\n        sendTransaction();\r\n      }\r\n  }, [txDetails])\r\n\r\n  useEffect(()=>{\r\n\r\n    messageApi.destroy();\r\n\r\n    if(isLoading){\r\n      messageApi.open({\r\n        type: 'loading',\r\n        content: 'Transaction is Pending...',\r\n        duration: 2,\r\n      })\r\n      \r\n    }    \r\n\r\n  },[isLoading])\r\n\r\n  useEffect(()=>{\r\n    if(isSuccess){\r\n      messageApi.open({\r\n        type: 'success',\r\n        content: 'Transaction Successful',\r\n        duration: 1.5,\r\n      })\r\n    }else if(txDetails.to){\r\n      messageApi.open({\r\n        type: 'error',\r\n        content: 'Transaction Failed',\r\n        duration: 1.50,\r\n      })\r\n    }\r\n\r\n\r\n  },[isSuccess])\r\n\r\n\r\n  const settings = (\r\n    <>\r\n      <div>Slippage Tolerance</div>\r\n      <div>\r\n        <Radio.Group value={slippage} onChange={handleSlippageChange}>\r\n          <Radio.Button value={0.5}>0.5%</Radio.Button>\r\n          <Radio.Button value={2.5}>2.5%</Radio.Button>\r\n          <Radio.Button value={5}>5.0%</Radio.Button>\r\n        </Radio.Group>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {contextHolder}\r\n      <Modal\r\n        open={isOpen}\r\n        footer={null}\r\n        onCancel={() => setIsOpen(false)}\r\n        title=\"Select a token\"\r\n      >\r\n        <div className=\"modalContent\">\r\n          {tokenList?.map((e, i) => {\r\n            return (\r\n              <div\r\n                className=\"tokenChoice\"\r\n                key={i}\r\n                onClick={() => modifyToken(i)}\r\n              >\r\n                <img src={e.img} alt={e.ticker} className=\"tokenLogo\" />\r\n                <div className=\"tokenChoiceNames\">\r\n                  <div className=\"tokenName\">{e.name}</div>\r\n                  <div className=\"tokenTicker\">{e.ticker}</div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Modal>\r\n      <div className=\"tradeBox\">\r\n        <div className=\"tradeBoxHeader\">\r\n          <h4>Swap</h4>\r\n          <Popover\r\n            content={settings}\r\n            title=\"Settings\"\r\n            trigger=\"click\"\r\n            placement=\"bottomRight\"\r\n          >\r\n            <SettingOutlined className=\"cog\" />\r\n          </Popover>\r\n        </div>\r\n        <div className=\"inputs\">\r\n          <Input\r\n            placeholder=\"0\"\r\n            value={tokenOneAmount}\r\n            onChange={changeAmount}\r\n            disabled={!prices}\r\n          />\r\n          <Input placeholder=\"0\" value={tokenTwoAmount} disabled={true} />\r\n          <div className=\"switchButton\" onClick={switchTokens}>\r\n            <ArrowDownOutlined className=\"switchArrow\" />\r\n          </div>\r\n          <div className=\"assetOne\" onClick={() => openModal(1)}>\r\n            <img src={tokenOne.img} alt=\"assetOneLogo\" className=\"assetLogo\" />\r\n            {tokenOne.ticker}\r\n            <DownOutlined />\r\n          </div>\r\n          <div className=\"assetTwo\" onClick={() => openModal(2)}>\r\n            <img src={tokenTwo.img} alt=\"assetOneLogo\" className=\"assetLogo\" />\r\n            {tokenTwo.ticker}\r\n            <DownOutlined />\r\n          </div>\r\n        </div>\r\n        <div className=\"swapButton\" disabled={!tokenOneAmount || !isConnected} onClick={fetchDexSwap}>Swap</div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","C:\\Users\\DELL\\Desktop\\web3 projects\\dexStarter\\dex\\src\\components\\Tokens.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":127,"column":6,"nodeType":"34","endLine":127,"endColumn":17,"suggestions":"35"},{"ruleId":"32","severity":1,"message":"36","line":142,"column":5,"nodeType":"34","endLine":142,"endColumn":16,"suggestions":"37"},{"ruleId":"32","severity":1,"message":"38","line":160,"column":5,"nodeType":"34","endLine":160,"endColumn":16,"suggestions":"39"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isConnected' and 'sendTransaction'. Either include them or remove the dependency array.","ArrayExpression",["40"],"React Hook useEffect has a missing dependency: 'messageApi'. Either include it or remove the dependency array.",["41"],"React Hook useEffect has missing dependencies: 'messageApi' and 'txDetails.to'. Either include them or remove the dependency array.",["42"],{"desc":"43","fix":"44"},{"desc":"45","fix":"46"},{"desc":"47","fix":"48"},"Update the dependencies array to be: [isConnected, sendTransaction, txDetails]",{"range":"49","text":"50"},"Update the dependencies array to be: [isLoading, messageApi]",{"range":"51","text":"52"},"Update the dependencies array to be: [isSuccess, messageApi, txDetails.to]",{"range":"53","text":"54"},[3664,3675],"[isConnected, sendTransaction, txDetails]",[3905,3916],"[isLoading, messageApi]",[4257,4268],"[isSuccess, messageApi, txDetails.to]"]